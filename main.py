import logging

import torch
import streamlit as st

from database import get_db
from models import User
from src import LlamaService
import json

torch.classes.__path__ = []
logging.basicConfig()
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if "messages" not in st.session_state:
    st.session_state.messages = []
if "user_id" not in st.session_state:
    st.session_state.user_id = None
if "username" not in st.session_state:
    st.session_state.username = None
if "change_user" not in st.session_state:
    st.session_state.change_user = False
if "feedback" not in st.session_state:
        st.session_state.feedback = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LlamaService
llama = LlamaService(st.session_state.user_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
def get_username_by_id(user_id: int) -> str | None:
    try:
        session = next(get_db())
        user = session.query(User).filter_by(user_id=user_id).first()
        return user.username if user else None

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        return None


# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ username –≤ session_state —Ä–µ–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
if st.session_state.user_id:
    db_username = get_username_by_id(st.session_state.user_id)
    if db_username and db_username != st.session_state.username:
        st.session_state.username = db_username

st.title("üí¨ –ß–∞—Ç —Å LLM")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è)
if st.session_state.user_id is not None and not st.session_state.change_user:
    # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
    st.subheader(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {st.session_state.username}")

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2, col3, col4  = st.columns(4)
    with col1:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å"):
            st.session_state.messages = []
            llama.clear_memory()
            st.rerun()
    with col2:
        if st.button("üë§ –°–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
            st.session_state.change_user = True
            st.session_state.user_id = None
            st.session_state.username = None
            st.rerun()
    with col3:
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é"):
            for key in st.session_state.keys():
                del st.session_state[key]
            st.session_state.change_user = True
            st.rerun()
    with col4:
        if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç"):
            chat_export = []
            for i, message in enumerate(st.session_state.messages):
                entry = {
                    "role": message["role"],
                    "content": message["content"],
                    "feedback": st.session_state.feedback.get(i, "")
                }
                chat_export.append(entry)
            chat_json = json.dumps(chat_export, ensure_ascii=False, indent=2)
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å —á–∞—Ç (JSON)",
                data=chat_json,
                file_name="chat_history.json",
                mime="application/json"
            )

    # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ—Ç–≤–µ—Ç—É
    if st.session_state.messages:
        last_index = len(st.session_state.messages) - 1
        last_message = st.session_state.messages[last_index]
        if last_message["role"] == "assistant":
            st.markdown("### ü§ñ –û—Ü–µ–Ω–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç:")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üëç –ü–æ–ª–µ–∑–Ω—ã–π", key="feedback_good"):
                    st.session_state.feedback[last_index] = "–ü–æ–ª–µ–∑–Ω—ã–π"
            with col2:
                if st.button("üëé –ù–µ–ø–æ–ª–µ–∑–Ω—ã–π", key="feedback_bad"):
                    st.session_state.feedback[last_index] = "–ù–µ–ø–æ–ª–µ–∑–Ω—ã–π"

            feedback_val = st.session_state.feedback.get(last_index)
            if feedback_val:
                st.success(f"–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –æ—Ç–≤–µ—Ç –∫–∞–∫: {feedback_val}")

            # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –æ—Ç–≤–µ—Ç—É
            if st.button("üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –æ—Ç–≤–µ—Ç—É"):
                explanation = llama.explain_response(last_message["content"], last_message["content"])
                st.write("–ü–æ—è—Å–Ω–µ–Ω–∏–µ:", explanation)

            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏–∏
            if st.button("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏–∏"):
                analytics = llama.generate_session_analytics()
                st.write("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏–∏:", analytics)

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            with st.spinner("–ü–µ—á–∞—Ç–∞–µ—Ç..."):
                response = llama.generate_response(
                    prompt,
                    st.session_state.messages,
                    st.session_state.username
                )
                st.markdown(response)
                st.session_state.messages.append({"role": "assistant", "content": response})

# –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
else:
    st.write("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è"):
        if username:
            st.session_state.user_id = llama._get_or_create_user(username)
            st.session_state.username = username
            st.session_state.change_user = False
            st.rerun()

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
    <style>
    .stTextArea textarea {
        border: 2px solid #007bff;
        border-radius: 5px;
        padding: 10px;
    }
    .stButton button {
        background-color: #007bff;
        color: white;
        border-radius: 5px;
    }
    </style>
""", unsafe_allow_html=True)
